// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  // User preferences
  defaultLanguage Language @default(En)
  timezone        String?  @default("UTC")

  accounts Account[]
  sessions Session[]
  batches  Batch[]

  @@index([role])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Batch {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  cropType          String
  imagesZipURL      String
  preferredLanguage Language @default(En)

  // Processing status
  isModelCompleted   Boolean @default(false)
  isDescCompleted    Boolean @default(false)
  isAudioCompleted   Boolean @default(false)
  hasExecutionFailed Boolean @default(false)

  // Metadata
  imagesCount Int    @default(0)
  sessionId   String @default(uuid())

  // Legacy fields for backward compatibility
  description String? @db.String
  audioURL    String? @db.String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  descriptions   Description[]
  audioFiles     AudioFile[]
  processingJobs ProcessingJob[]

  metadata Json? // For additional metadata storage

  // Optimized indexes
  @@index([userId, createdAt])
  @@index([userId, cropType])
  @@index([preferredLanguage])
  @@index([isModelCompleted, isDescCompleted, isAudioCompleted])
}

enum Role {
  USER
  ADMIN
}

enum Language {
  En
  Ta
  Hi
  Te
  Ml
  Kn
}

enum JobType {
  MODEL_ANALYSIS
  DESCRIPTION_GENERATION
  AUDIO_GENERATION
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ProcessingJob {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  batchId      String    @db.ObjectId
  jobType      JobType
  status       JobStatus @default(PENDING)
  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId, jobType])
  @@index([status])
  @@index([createdAt])
}

model AudioFile {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  batchId  String   @db.ObjectId
  language Language
  fileUrl  String
  fileName String
  duration Float? // in seconds
  fileSize Int? // in bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, language])
}

model Description {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  batchId  String   @db.ObjectId
  language Language

  // Descriptive content
  longDescription  String @db.String
  shortDescription String @db.String

  // Additional metadata
  wordCount  Int? // For analytics
  confidence Float? // AI confidence score

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  // Ensure one description per language per batch
  @@unique([batchId, language])
}
