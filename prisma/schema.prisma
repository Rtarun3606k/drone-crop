// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  Batch         Batch[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Batch {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  cropType          String
  imagesZipURL      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId         String   @default(uuid())
  isCompletedModel  Boolean  @default(false)
  isCompletedDesc   Boolean  @default(false)
  isCompletedAudio  Boolean  @default(false)
  imagesCount       Int      @default(0)
  description       String?  @db.String
  prefferedLanguage Language @default(En)
  audioURL          String?  @db.String

  @@index([id, userId, cropType, sessionId, isCompletedModel], name: "batch_user_index")
}

enum Role {
  USER
  ADMIN
}

enum Language {
  En
  Ta
  Hi
  Te
  Ml
  Kn
}
